import {
    Component,
    computed,
    effect,
    inject,
    OnDestroy,
    OnInit,
} from '@angular/core';
import {PanelService} from "../../../services/panel.service";
import {JsonPipe, NgClass} from "@angular/common";
import {
    HlmTabsComponent,
    HlmTabsContentDirective,
    HlmTabsListComponent,
    HlmTabsTriggerDirective
} from "@spartan-ng/ui-tabs-helm";
import {
    HlmCardContentDirective,
    HlmCardDescriptionDirective,
    HlmCardDirective,
    HlmCardFooterDirective,
    HlmCardHeaderDirective,
    HlmCardTitleDirective
} from "@spartan-ng/ui-card-helm";
import {DrawingService} from "../../../services/drawing.service";

import {EditorState} from "@codemirror/state";
import {EditorView} from "@codemirror/view";
import {json} from "@codemirror/lang-json";
import {basicSetup} from "codemirror";
import {
    HighlightStyle,
    syntaxHighlighting
} from "@codemirror/language";
import {tags} from "@lezer/highlight";

@Component({
    selector: 'app-open-panel',
    standalone: true,
    imports: [
        NgClass,
        HlmTabsListComponent,
        HlmTabsComponent,
        HlmTabsContentDirective,
        HlmTabsTriggerDirective,
        HlmCardDirective,
        HlmCardHeaderDirective,
        HlmCardTitleDirective,
        HlmCardDescriptionDirective,
        HlmCardContentDirective,
        HlmCardFooterDirective,
        JsonPipe,
    ],
    templateUrl: './open-panel.component.html',
    styleUrl: './open-panel.component.css'
})
export class OpenPanelComponent implements OnInit, OnDestroy {
    private editorView!: EditorView;

    panelService = inject(PanelService);
    drawingService = inject(DrawingService);

    // Define syntax highlighting styles
    private jsonHighlighting = HighlightStyle.define([
        {tag: tags.string, color: "#a8ff60"},
        {tag: tags.number, color: "#ff9d00"},
        {tag: tags.bool, color: "#ff628c"},
        {tag: tags.null, color: "#ff628c"},
        {tag: tags.propertyName, color: "#5ccfe6"},
        {tag: tags.punctuation, color: "#ffee80"},
        {tag: tags.bracket, color: "#ffee80"}
    ]);

    geojson = computed(() => {
        try {
            const rawData = this.drawingService.drawnFeaturesGeoJSON();
            console.log('Raw GeoJSON:', rawData); // Debug log
            return JSON.stringify(JSON.parse(rawData), null, 2);
        } catch (err) {
            console.error('Error parsing GeoJSON:', err);
            return "";
        }
    });

    constructor() {
        effect(() => {
            this.updateEditorState();
        });
    }

    ngOnInit() {

        console.log('Tags: ', tags);
        const editorElement = document.getElementById("editor");
        if (!editorElement) {
            console.error('Editor element not found');
            return;
        }

        // Basic theme setup
        const theme = EditorView.theme({
            "&": {
                height: "100%",
                backgroundColor: "#1e1e1e"
            },
            ".cm-content": {
                padding: "10px",
                color: "#ffffff",
                fontSize: "14px",
                fontFamily: "monospace"
            },
            ".cm-line": {
                padding: "0 8px"
            }
        });

        try {
            const state = EditorState.create({
                doc: JSON.stringify({
                  "type": "FeatureCollection",
                  "features": []
                }, null, 2),
                extensions: [
                    //theme,
                    //basicSetup,
                    json(),
                    //syntaxHighlighting(this.jsonHighlighting),
                    //EditorState.readOnly.of(true),
                    //EditorView.lineWrapping
                ]
            });

            this.editorView = new EditorView({
                state,
                parent: editorElement
            });

            console.log('Editor initialized with content:', this.geojson());
        } catch (error) {
            console.error('Error initializing editor:', error);
        }
    }

    ngOnDestroy() {
        this.editorView?.destroy();
    }

    private updateEditorState() {
        if (!this.editorView) return;

        try {
            const newContent = this.geojson();
            if (newContent != "") {
                console.log('Updating editor with:', newContent); // Debug log
                console.log('Updating editor with newContent type:', typeof newContent); // Debug log
                this.editorView.dispatch({
                    changes: {
                        from: 0,
                        to: this.editorView.state.doc.length,
                        insert: newContent
                    }
                });
            }
        } catch (err) {
            console.error("Error updating editor state:", err);
        }
    }
}